"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GeneralLib = __importStar(require("ew-utils-general-lib"));
const SupplyOffchainProperties_schema_json_1 = __importDefault(require("../../schemas/SupplyOffchainProperties.schema.json"));
exports.getSupplyListLength = (configuration) => __awaiter(this, void 0, void 0, function* () {
    return configuration.blockchainProperties.marketLogicInstance.getAllSupplyListLength();
});
exports.createSupply = (supplyPropertiesOnChain, supplyPropertiesOffChain, configuration) => __awaiter(this, void 0, void 0, function* () {
    const supply = new Entity(null, configuration);
    const offChainStorageProperties = supply.prepareEntityCreation(supplyPropertiesOnChain, supplyPropertiesOffChain, SupplyOffchainProperties_schema_json_1.default, supply.getUrl());
    if (configuration.offChainDataSource) {
        supplyPropertiesOnChain.url = supply.getUrl();
        supplyPropertiesOnChain.propertiesDocumentHash = offChainStorageProperties.rootHash;
    }
    const tx = yield configuration.blockchainProperties.marketLogicInstance.createSupply(supplyPropertiesOnChain.propertiesDocumentHash, supplyPropertiesOnChain.url, supplyPropertiesOnChain.assetId, {
        from: configuration.blockchainProperties.activeUser.address,
        privateKey: configuration.blockchainProperties.activeUser.privateKey,
    });
    supply.id = configuration.blockchainProperties.web3.utils.hexToNumber(tx.logs[0].topics[1]).toString();
    yield supply.putToOffChainStorage(supplyPropertiesOffChain, offChainStorageProperties);
    if (configuration.logger) {
        configuration.logger.info(`Supply ${supply.id} created`);
    }
    return supply.sync();
});
class Entity extends GeneralLib.BlockchainDataModelEntity.Entity {
    constructor(id, configuration) {
        super(id, configuration);
        this.initialized = false;
    }
    getUrl() {
        return `${this.configuration.offChainDataSource.baseUrl}/Supply`;
    }
    sync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.id != null) {
                const demand = yield this.configuration.blockchainProperties.marketLogicInstance.getSupply(this.id);
                this.propertiesDocumentHash = demand._propertiesDocumentHash;
                this.url = demand._documentDBURL;
                this.assetId = demand._assetId;
                this.initialized = true;
                this.offChainProperties = yield this.getOffChainProperties(this.propertiesDocumentHash);
                if (this.configuration.logger) {
                    this.configuration.logger.verbose(`Supply ${this.id} synced`);
                }
            }
            return this;
        });
    }
}
exports.Entity = Entity;
//# sourceMappingURL=Supply.js.map