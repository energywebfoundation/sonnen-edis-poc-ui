"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GeneralLib = __importStar(require("ew-utils-general-lib"));
const AgreementOffChainProperties_schema_json_1 = __importDefault(require("../../schemas/AgreementOffChainProperties.schema.json"));
const MatcherOffchainProperties_schema_json_1 = __importDefault(require("../../schemas/MatcherOffchainProperties.schema.json"));
exports.createAgreement = (agreementPropertiesOnChain, agreementPropertiesOffchain, matcherPropertiesOffchain, configuration) => __awaiter(this, void 0, void 0, function* () {
    const agreement = new Entity(null, configuration);
    const agreementOffChainStorageProperties = agreement.prepareEntityCreation(agreementPropertiesOnChain, agreementPropertiesOffchain, AgreementOffChainProperties_schema_json_1.default, agreement.getUrl());
    const matcherOffchainStorageProperties = agreement.prepareEntityCreation(agreementPropertiesOnChain, matcherPropertiesOffchain, MatcherOffchainProperties_schema_json_1.default, agreement.getMatcherURL());
    if (configuration.offChainDataSource) {
        agreementPropertiesOnChain.url = agreement.getUrl();
        agreementPropertiesOnChain.propertiesDocumentHash = agreementOffChainStorageProperties.rootHash;
        agreementPropertiesOnChain.matcherDBURL = agreement.getMatcherURL();
        agreementPropertiesOnChain.matcherPropertiesDocumentHash = matcherOffchainStorageProperties.rootHash;
    }
    const tx = yield configuration.blockchainProperties.marketLogicInstance.createAgreement(agreementPropertiesOnChain.propertiesDocumentHash, agreementPropertiesOnChain.url, agreementPropertiesOnChain.matcherPropertiesDocumentHash, agreementPropertiesOnChain.matcherDBURL, agreementPropertiesOnChain.demandId, agreementPropertiesOnChain.supplyId, {
        from: configuration.blockchainProperties.activeUser.address,
        privateKey: configuration.blockchainProperties.activeUser.privateKey,
    });
    agreement.id = configuration.blockchainProperties.web3.utils.hexToNumber(tx.logs[0].topics[1]).toString();
    yield agreement.putToOffChainStorage(agreementPropertiesOffchain, agreementOffChainStorageProperties);
    yield agreement.putToOffChainStorage(matcherPropertiesOffchain, matcherOffchainStorageProperties, agreement.getMatcherURL());
    if (configuration.logger) {
        configuration.logger.info(`Agreement ${agreement.id} created`);
    }
    return agreement.sync();
});
exports.getAgreementListLength = (configuration) => __awaiter(this, void 0, void 0, function* () {
    return configuration.blockchainProperties.marketLogicInstance.getAllAgreementListLength();
});
class Entity extends GeneralLib.BlockchainDataModelEntity.Entity {
    constructor(id, configuration) {
        super(id, configuration);
        this.initialized = true;
    }
    getUrl() {
        return `${this.configuration.offChainDataSource.baseUrl}/Agreement`;
    }
    getMatcherURL() {
        return `${this.configuration.offChainDataSource.baseUrl}/Matcher`;
    }
    sync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.id != null) {
                const agreement = yield this.configuration.blockchainProperties.marketLogicInstance.getAgreement(this.id);
                this.propertiesDocumentHash = agreement._propertiesDocumentHash;
                this.url = agreement._documentDBURL;
                this.matcherPropertiesDocumentHash = agreement._matcherPropertiesDocumentHash;
                this.matcherDBURL = agreement._matcherDBURL;
                this.demandId = agreement._demandId;
                this.supplyId = agreement._supplyId;
                this.approvedBySupplyOwner = agreement._approvedBySupplyOwner;
                this.approvedByDemandOwner = agreement._approvedByDemandOwner;
                this.allowedMatcher = agreement._allowedMatcher;
                this.offChainProperties = yield this.getOffChainProperties(this.propertiesDocumentHash, this.getUrl());
                this.matcherOffChainProperties =
                    yield this.getOffChainProperties(this.matcherPropertiesDocumentHash, this.getMatcherURL());
                if (this.configuration.logger) {
                    this.configuration.logger.verbose(`Agreement with ${this.id} synced`);
                }
                this.initialized = true;
            }
            return this;
        });
    }
    approveAgreementDemand() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.marketLogicInstance.approveAgreementDemand(this.id, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.marketLogicInstance.approveAgreementDemand(this.id, { from: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
    approveAgreementSupply() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.marketLogicInstance.approveAgreementSupply(this.id, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.marketLogicInstance.approveAgreementSupply(this.id, { from: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
    setMatcherProperties(matcherOffchainProperties) {
        return __awaiter(this, void 0, void 0, function* () {
            const agreementPropsOnChain = {
                matcherPropertiesDocumentHash: null,
                matcherDBURL: null,
                demandId: this.demandId,
                supplyId: this.supplyId,
                allowedMatcher: this.allowedMatcher,
                propertiesDocumentHash: null,
                url: null,
            };
            const matcherOffchainStorageProperties = this.prepareEntityCreation(agreementPropsOnChain, matcherOffchainProperties, MatcherOffchainProperties_schema_json_1.default, this.getMatcherURL());
            let tx;
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                tx = yield this.configuration.blockchainProperties.marketLogicInstance.setMatcherProperties(this.id, matcherOffchainStorageProperties.rootHash, this.matcherDBURL, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                tx = yield this.configuration.blockchainProperties.marketLogicInstance.setMatcherProperties(this.id, matcherOffchainStorageProperties.rootHash, this.matcherDBURL, { from: this.configuration.blockchainProperties.activeUser.address });
            }
            yield this.putToOffChainStorage(matcherOffchainProperties, matcherOffchainStorageProperties, this.getMatcherURL());
            return tx;
        });
    }
}
exports.Entity = Entity;
//# sourceMappingURL=Agreement.js.map