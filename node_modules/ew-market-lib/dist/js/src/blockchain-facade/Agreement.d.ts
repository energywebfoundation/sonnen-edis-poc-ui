import * as GeneralLib from 'ew-utils-general-lib';
import { TransactionReceipt } from 'web3/types';
export interface AgreementOffChainProperties {
    start: number;
    ende: number;
    price: number;
    currency: GeneralLib.Currency;
    period: number;
    timeframe: GeneralLib.TimeFrame;
}
export interface MatcherOffchainProperties {
    currentWh: number;
    currentPeriod: number;
}
export interface AgreementOnChainProperties extends GeneralLib.BlockchainDataModelEntity.OnChainProperties {
    matcherPropertiesDocumentHash: string;
    matcherDBURL: string;
    demandId: number;
    supplyId: number;
    allowedMatcher: string[];
}
export declare const createAgreement: (agreementPropertiesOnChain: AgreementOnChainProperties, agreementPropertiesOffchain: AgreementOffChainProperties, matcherPropertiesOffchain: MatcherOffchainProperties, configuration: GeneralLib.Configuration.Entity) => Promise<Entity>;
export declare const getAgreementListLength: (configuration: GeneralLib.Configuration.Entity) => Promise<number>;
export declare class Entity extends GeneralLib.BlockchainDataModelEntity.Entity implements AgreementOnChainProperties {
    matcherOffChainProperties: MatcherOffchainProperties;
    offChainProperties: AgreementOffChainProperties;
    propertiesDocumentHash: string;
    url: string;
    matcherPropertiesDocumentHash: string;
    matcherDBURL: string;
    demandId: number;
    supplyId: number;
    approvedBySupplyOwner: boolean;
    approvedByDemandOwner: boolean;
    allowedMatcher: string[];
    initialized: boolean;
    configuration: GeneralLib.Configuration.Entity;
    constructor(id: string, configuration: GeneralLib.Configuration.Entity);
    getUrl(): string;
    getMatcherURL(): string;
    sync(): Promise<Entity>;
    approveAgreementDemand(): Promise<TransactionReceipt>;
    approveAgreementSupply(): Promise<TransactionReceipt>;
    setMatcherProperties(matcherOffchainProperties: MatcherOffchainProperties): Promise<TransactionReceipt>;
}
