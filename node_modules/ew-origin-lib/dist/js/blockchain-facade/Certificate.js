"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const TradableEntity = __importStar(require(".."));
exports.getCertificateListLength = (configuration) => __awaiter(this, void 0, void 0, function* () {
    return parseInt(yield configuration.blockchainProperties.certificateLogicInstance.getCertificateListLength(), 10);
});
exports.getAllCertificates = (configuration) => __awaiter(this, void 0, void 0, function* () {
    const certificatePromises = Array(yield exports.getCertificateListLength(configuration))
        .fill(null)
        .map((item, index) => (new Entity(index.toString(), configuration)).sync());
    return Promise.all(certificatePromises);
});
exports.isRetired = (certId, configuration) => __awaiter(this, void 0, void 0, function* () {
    return configuration.blockchainProperties.certificateLogicInstance.isRetired(certId);
});
exports.getAllCertificateEvents = (certId, configuration) => __awaiter(this, void 0, void 0, function* () {
    const allEvents = yield configuration.blockchainProperties.certificateLogicInstance.getAllEvents({
        topics: [null, configuration.blockchainProperties.web3.utils.padLeft(configuration.blockchainProperties.web3.utils.fromDecimal(certId), 64, '0')],
    });
    const returnEvents = [];
    for (const fullEvent of allEvents) {
        // we have to remove some false positives due to ERC721 interface
        if (fullEvent.event === 'Transfer') {
            if (fullEvent.returnValues._tokenId === '' + certId) {
                returnEvents.push(fullEvent);
            }
        }
        else {
            returnEvents.push(fullEvent);
        }
    }
    // we also have to search
    if (certId !== 0) {
        const transferEvents = yield configuration.blockchainProperties.certificateLogicInstance.getAllTransferEvents({
            topics: ['0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', null, null, configuration.blockchainProperties.web3.utils.padLeft(configuration.blockchainProperties.web3.utils.fromDecimal(certId), 64, '0')],
        });
        for (const transferEvent of transferEvents) {
            returnEvents.push(transferEvent);
        }
    }
    return returnEvents;
});
class Entity extends TradableEntity.TradableEntity.Entity {
    getUrl() {
        return `${this.configuration.offChainDataSource.baseUrl}/Certificate`;
    }
    sync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.id != null) {
                const cert = yield this.configuration.blockchainProperties.certificateLogicInstance.getEnergyCertificateStruct(this.id);
                this.assetId = cert.tradableEntity.assetId;
                this.owner = cert.tradableEntity.owner;
                this.powerInW = cert.tradableEntity.powerInW;
                this.acceptedToken = cert.tradableEntity.acceptedToken;
                this.onCHainDirectPurchasePrice = cert.tradableEntity.onChainDirectPurchasePrice;
                this.escrow = cert.tradableEntity.escrow;
                this.approvedAddress = cert.tradableEntity.approvedAddress;
                this.activationId = cert.flexibility.activationId;
                this.dateTimeFrom = cert.flexibility.datetimeFrom;
                this.dateTimeTo = cert.flexibility.datetimeTo;
                this.energyAmount = cert.flexibility.energyAmountInWh;
                this.averagePower = cert.flexibility.averagePowerInW;
                this.baselinePower = cert.flexibility.baselinePowerInW;
                this.powerProfileURL = cert.flexibility.powerProfileURL;
                this.powerProfileHash = cert.flexibility.powerProfileHash;
                this.reportConfirmed = cert.flexibility.reportConfirmed;
                this.initialized = true;
                if (this.configuration.logger) {
                    this.configuration.logger.verbose(`Certificate ${this.id} synced`);
                }
            }
            return this;
        });
    }
    /*
    async buyCertificate(): Promise<TransactionReceipt> {
        if (this.configuration.blockchainProperties.activeUser.privateKey) {
            return this.configuration.blockchainProperties.certificateLogicInstance.buyCertificate(
                this.id,
                { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
        }
        else {
            return this.configuration.blockchainProperties.certificateLogicInstance.buyCertificate(
                this.id,
                { from: this.configuration.blockchainProperties.activeUser.address });
        }
    }

    async retireCertificate(): Promise<TransactionReceipt> {
        if (this.configuration.blockchainProperties.activeUser.privateKey) {
            return this.configuration.blockchainProperties.certificateLogicInstance.retireCertificate(
                this.id,
                { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
        }
        else {
            return this.configuration.blockchainProperties.certificateLogicInstance.retireCertificate(
                this.id,
                { from: this.configuration.blockchainProperties.activeUser.address });
        }
    }

    async splitCertificate(power: number): Promise<TransactionReceipt> {
        if (this.configuration.blockchainProperties.activeUser.privateKey) {
            return this.configuration.blockchainProperties.certificateLogicInstance.splitCertificate(
                this.id,
                power,
                { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
        }
        else {
            return this.configuration.blockchainProperties.certificateLogicInstance.splitCertificate(
                this.id,
                power,
                { from: this.configuration.blockchainProperties.activeUser.address },
            );
        }
    }
    */
    getCertificateOwner() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.configuration.blockchainProperties.certificateLogicInstance.getCertificateOwner(this.id);
        });
    }
    isRetired() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.configuration.blockchainProperties.certificateLogicInstance.isRetired(this.id);
        });
    }
    getAllCertificateEvents() {
        return __awaiter(this, void 0, void 0, function* () {
            const allEvents = yield this.configuration.blockchainProperties.certificateLogicInstance.getAllEvents({
                topics: [null,
                    this.configuration.blockchainProperties.web3.utils.padLeft(this.configuration.blockchainProperties.web3.utils.fromDecimal(this.id), 64, '0'),
                ],
            });
            const returnEvents = [];
            for (const fullEvent of allEvents) {
                // we have to remove some false positives due to ERC721 interface
                if (fullEvent.event === 'Transfer') {
                    if (fullEvent.returnValues._tokenId === '' + this.id) {
                        returnEvents.push(fullEvent);
                    }
                }
                else {
                    returnEvents.push(fullEvent);
                }
            }
            // we also have to search
            if (this.id !== '0') {
                const transferEvents = yield this.configuration.blockchainProperties.certificateLogicInstance.getAllTransferEvents({
                    topics: ['0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
                        null,
                        null,
                        this.configuration.blockchainProperties.web3.utils.padLeft(this.configuration.blockchainProperties.web3.utils.fromDecimal(this.id), 64, '0')],
                });
                for (const transferEvent of transferEvents) {
                    returnEvents.push(transferEvent);
                }
            }
            return returnEvents;
        });
    }
}
exports.Entity = Entity;
//# sourceMappingURL=Certificate.js.map