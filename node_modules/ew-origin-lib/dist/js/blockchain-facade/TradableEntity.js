"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const GeneralLib = __importStar(require("ew-utils-general-lib"));
exports.getBalance = (owner, configuration) => __awaiter(this, void 0, void 0, function* () {
    return (configuration.blockchainProperties.certificateLogicInstance.balanceOf(owner));
});
exports.ownerOf = (certId, configuration) => __awaiter(this, void 0, void 0, function* () {
    return (configuration.blockchainProperties.certificateLogicInstance.ownerOf(certId));
});
exports.getApproved = (certId, configuration) => __awaiter(this, void 0, void 0, function* () {
    return configuration.blockchainProperties.certificateLogicInstance.getApproved(certId);
});
exports.getTradableToken = (certId, configuration) => __awaiter(this, void 0, void 0, function* () {
    return configuration.blockchainProperties.certificateLogicInstance.getTradableToken(certId);
});
exports.getOnchainDirectPurchasePrice = (certId, configuration) => __awaiter(this, void 0, void 0, function* () {
    return configuration.blockchainProperties.certificateLogicInstance.getOnchainDirectPurchasePrice(certId);
});
exports.isApprovedForAll = (owner, matcher, configuration) => __awaiter(this, void 0, void 0, function* () {
    return configuration.blockchainProperties.certificateLogicInstance.isApprovedForAll(owner, matcher);
});
exports.setApprovalForAll = (matcher, approved, configuration) => __awaiter(this, void 0, void 0, function* () {
    if (configuration.blockchainProperties.activeUser.privateKey) {
        return configuration.blockchainProperties.certificateLogicInstance.setApprovalForAll(matcher, approved, { privateKey: configuration.blockchainProperties.activeUser.privateKey });
    }
    else {
        return configuration.blockchainProperties.certificateLogicInstance.setApprovalForAll(matcher, approved, { from: configuration.blockchainProperties.activeUser.address });
    }
});
class Entity extends GeneralLib.BlockchainDataModelEntity.Entity {
    constructor(id, configuration) {
        super(id, configuration);
        this.initialized = false;
    }
    safeTransferFrom(_to, _calldata) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.certificateLogicInstance.safeTransferFrom(this.owner, _to, this.id, _calldata ? _calldata : null, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.certificateLogicInstance.safeTransferFrom(this.owner, _to, this.id, _calldata ? _calldata : null, { from: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
    transferFrom(_to) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.certificateLogicInstance.transferFrom(this.owner, _to, this.id, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.certificateLogicInstance.transferFrom(this.owner, _to, this.id, { from: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
    approve(_approved) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.certificateLogicInstance.approve(_approved, this.id, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.certificateLogicInstance.approve(_approved, this.id, { from: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
    getApproved() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.configuration.blockchainProperties.certificateLogicInstance.getApproved(this.id);
        });
    }
    isApprovedForAll(matcher) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.configuration.blockchainProperties.certificateLogicInstance.isApprovedForAll(this.owner, matcher);
        });
    }
    setTradableToken(token) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.certificateLogicInstance.setTradableToken(this.id, token, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.certificateLogicInstance.setTradableToken(this.id, token, { from: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
    setOnChainDirectPurchasePrice(price) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.certificateLogicInstance.setOnChainDirectPurchasePrice(this.id, price, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.certificateLogicInstance.setOnChainDirectPurchasePrice(this.id, price, { from: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
    getTradableToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.configuration.blockchainProperties.certificateLogicInstance.getTradableToken(this.id);
        });
    }
    getOnChainDirectPurchasePrice() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.configuration.blockchainProperties.certificateLogicInstance.getOnChainDirectPurchasePrice(this.id);
        });
    }
    removeEscrow(escrow) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.certificateLogicInstance.removeEscrow(this.id, escrow, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.certificateLogicInstance.removeEscrow(this.id, escrow, { from: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
    addEscrowForEntity(escrow) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.certificateLogicInstance.addEscrowForEntity(this.id, escrow, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.certificateLogicInstance.addEscrowForEntity(this.id, escrow, { from: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
    getOwner() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.configuration.blockchainProperties.certificateLogicInstance.ownerOf(this.id);
        });
    }
}
exports.Entity = Entity;
//# sourceMappingURL=TradableEntity.js.map