import * as GeneralLib from 'ew-utils-general-lib';
import { TransactionReceipt } from 'web3/types';
export interface OnChainProperties {
    assetId: number;
    owner: string;
    powerInW: number;
    acceptedToken?: number;
    onCHainDirectPurchasePrice: number;
    escrow: string[];
    approvedAddress: string;
}
export declare const getBalance: (owner: string, configuration: GeneralLib.Configuration.Entity) => Promise<number>;
export declare const ownerOf: (certId: number, configuration: GeneralLib.Configuration.Entity) => Promise<string>;
export declare const getApproved: (certId: number, configuration: GeneralLib.Configuration.Entity) => Promise<string>;
export declare const getTradableToken: (certId: number, configuration: GeneralLib.Configuration.Entity) => Promise<string>;
export declare const getOnchainDirectPurchasePrice: (certId: number, configuration: GeneralLib.Configuration.Entity) => Promise<number>;
export declare const isApprovedForAll: (owner: string, matcher: string, configuration: GeneralLib.Configuration.Entity) => Promise<boolean>;
export declare const setApprovalForAll: (matcher: string, approved: boolean, configuration: GeneralLib.Configuration.Entity) => Promise<TransactionReceipt>;
export declare abstract class Entity extends GeneralLib.BlockchainDataModelEntity.Entity implements OnChainProperties {
    assetId: number;
    owner: string;
    powerInW: number;
    acceptedToken?: number;
    onCHainDirectPurchasePrice: number;
    escrow: string[];
    approvedAddress: string;
    initialized: boolean;
    constructor(id: string, configuration: GeneralLib.Configuration.Entity);
    safeTransferFrom(_to: string, _calldata?: string): Promise<TransactionReceipt>;
    transferFrom(_to: string): Promise<TransactionReceipt>;
    approve(_approved: string): Promise<TransactionReceipt>;
    getApproved(): Promise<string>;
    isApprovedForAll(matcher: string): Promise<boolean>;
    setTradableToken(token: string): Promise<TransactionReceipt>;
    setOnChainDirectPurchasePrice(price: number): Promise<TransactionReceipt>;
    getTradableToken(): Promise<string>;
    getOnChainDirectPurchasePrice(): Promise<number>;
    removeEscrow(escrow: string): Promise<TransactionReceipt>;
    addEscrowForEntity(escrow: string): Promise<TransactionReceipt>;
    getOwner(): Promise<string>;
}
