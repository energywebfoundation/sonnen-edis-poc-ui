import * as GeneralLib from 'ew-utils-general-lib';
import * as TradableEntity from '..';
import { Log } from 'web3/types';
export interface CertificateSpecific extends TradableEntity.TradableEntity.OnChainProperties {
    retired?: boolean;
    dataLog?: string;
    creationTime?: number;
    parentId?: number;
    children?: number[];
    maxOwnerChanges?: number;
    ownerChangerCounter?: number;
    activationId?: number;
    dateTimeFrom?: number;
    dateTimeTo?: number;
    energyAmount?: number;
    averagePower?: number;
    baselinePower?: number;
    powerProfileURL?: string;
    powerProfileHash?: string;
    reportConfirmed?: boolean;
}
export declare const getCertificateListLength: (configuration: GeneralLib.Configuration.Entity) => Promise<number>;
export declare const getAllCertificates: (configuration: GeneralLib.Configuration.Entity) => Promise<TradableEntity.Certificate.Entity[]>;
export declare const isRetired: (certId: number, configuration: GeneralLib.Configuration.Entity) => Promise<boolean>;
export declare const getAllCertificateEvents: (certId: number, configuration: GeneralLib.Configuration.Entity) => Promise<Log[]>;
export declare class Entity extends TradableEntity.TradableEntity.Entity implements CertificateSpecific {
    activationId: number;
    dateTimeFrom: number;
    dateTimeTo: number;
    energyAmount: number;
    averagePower: number;
    baselinePower: number;
    powerProfileURL: string;
    powerProfileHash: string;
    reportConfirmed: boolean;
    getUrl(): string;
    sync(): Promise<Entity>;
    getCertificateOwner(): Promise<string>;
    isRetired(): Promise<boolean>;
    getAllCertificateEvents(): Promise<Log[]>;
}
