// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it;

import { assert } from 'chai';
import * as fs from 'fs';
import 'mocha';
import { migrateUserRegistryContracts, UserLogic, UserContractLookup } from 'ew-user-registry-contracts';
import { migrateSonnenAssetRegistryContracts, AssetContractLookup, SonnenProducingAssetLogic } from 'ew-asset-registry-contracts';
import { OriginContractLookup, EnergyLogic, migrateSonnenContracts } from 'ew-origin-contracts';
import * as Certificate from '..';
import * as GeneralLib from 'ew-utils-general-lib';
import { logger } from '../blockchain-facade/Logger';
import * as Asset from 'ew-asset-registry-lib';
import { deployERC20TestToken, Erc20TestToken, TestReceiver, deployERC721TestReceiver } from 'ew-erc-test-contracts';
import Web3 from 'web3';
import { migrateMarketRegistryContracts, MarketLogic, MarketContractLookup } from 'ew-market-contracts';

describe('CertificateLogic-Facade', () => {

    let userLogic: UserLogic;
    let certificateLogic: EnergyLogic;
    let assetRegistry: SonnenProducingAssetLogic;
    let assetRegistryContract: AssetContractLookup;
    let originRegistryContract: OriginContractLookup;
    let userRegistryContract: UserContractLookup;

    let erc20TestToken: Erc20TestToken;
    let testReceiver: TestReceiver;

    const configFile = JSON.parse(fs.readFileSync(process.cwd() + '/connection-config.json', 'utf8'));

    const web3 = new Web3(configFile.develop.web3);

    const privateKeyDeployment = configFile.develop.deployKey.startsWith('0x') ?
        configFile.develop.deployKey : '0x' + configFile.develop.deployKey;

    const accountDeployment = web3.eth.accounts.privateKeyToAccount(privateKeyDeployment).address;

    const assetOwnerPK = '0xc118b0425221384fe0cbbd093b2a81b1b65d0330810e0792c7059e518cea5383';
    const accountAssetOwner = web3.eth.accounts.privateKeyToAccount(assetOwnerPK).address;

    const traderPK = '0x2dc5120c26df339dbd9861a0f39a79d87e0638d30fdedc938861beac77bbd3f5';
    const accountTrader = web3.eth.accounts.privateKeyToAccount(traderPK).address;

    const assetSmartmeterPK = '0x2dc5120c26df339dbd9861a0f39a79d87e0638d30fdedc938861beac77bbd3f5';
    const assetSmartmeter = web3.eth.accounts.privateKeyToAccount(assetSmartmeterPK).address;

    const matcherPK = '0xd9d5e7a2ebebbad1eb22a63baa739a6c6a6f15d07fcc990ea4dea5c64022a87a';
    const matcherAccount = web3.eth.accounts.privateKeyToAccount(matcherPK).address;

    const approvedPK = '0x7da67da863672d4cc2984e93ce28d98b0d782d8caa43cd1c977b919c0209541b';
    const approvedAccount = web3.eth.accounts.privateKeyToAccount(approvedPK).address;

    let conf: GeneralLib.Configuration.Entity;
    let marketContracts;
    let marketLogic: MarketLogic;
    let marketLookup: MarketContractLookup;

    let blockceationTime;

    it('should deploy the contracts', async () => {

        const userContracts = await migrateUserRegistryContracts((web3 as any), privateKeyDeployment);
        userLogic = new UserLogic((web3 as any), (userContracts as any).UserLogic);

        await userLogic.setUser(accountDeployment, 'admin', { privateKey: privateKeyDeployment });

        await userLogic.setRoles(accountDeployment, 3, { privateKey: privateKeyDeployment });

        const userContractLookupAddr = (userContracts as any).UserContractLookup;

        userRegistryContract = new UserContractLookup((web3 as any), userContractLookupAddr);
        const assetContracts = await migrateSonnenAssetRegistryContracts((web3 as any), userContractLookupAddr, privateKeyDeployment);

        const assetRegistryLookupAddr = (assetContracts as any).AssetContractLookup;

        const assetProducingAddr = (assetContracts as any).AssetProducingRegistryLogic;
        const originContracts = await migrateSonnenContracts((web3 as any), assetRegistryLookupAddr, privateKeyDeployment);

        assetRegistryContract = new AssetContractLookup((web3 as any), assetRegistryLookupAddr);
        assetRegistry = new SonnenProducingAssetLogic((web3 as any), assetProducingAddr);
        marketContracts = await migrateMarketRegistryContracts(web3, assetRegistryLookupAddr, privateKeyDeployment);

        marketLogic = new MarketLogic(web3, (marketContracts as any).MarketLogic);
        marketLookup = new MarketContractLookup(web3, (marketContracts as any).MarketContractLookup);

        assetRegistryContract = new AssetContractLookup(web3, assetRegistryLookupAddr);
        assetRegistry = new SonnenProducingAssetLogic((web3 as any), assetProducingAddr);

        Object.keys(originContracts).forEach(async (key) => {

            if (key.includes('OriginContractLookup')) {
                originRegistryContract = new OriginContractLookup((web3 as any), originContracts[key]);
            }

            if (key.includes('SonnenLogic')) {
                certificateLogic = new EnergyLogic(web3, originContracts[key]);
            }

        });

        conf = {
            blockchainProperties: {
                activeUser: {
                    address: accountDeployment, privateKey: privateKeyDeployment,
                },
                producingAssetLogicInstance: assetRegistry,
                userLogicInstance: userLogic,
                certificateLogicInstance: certificateLogic,
                web3,
            },
            offChainDataSource: {
                baseUrl: 'http://localhost:3030',
            },
            logger,
        };

    });

    it('should return correct balances', async () => {

        assert.equal(await Certificate.Certificate.getCertificateListLength(conf), 0);
        assert.equal(await Certificate.TradableEntity.getBalance(accountAssetOwner, conf), 0);
        assert.equal(await Certificate.TradableEntity.getBalance(accountTrader, conf), 0);

    });

    it('should onboard tests-users', async () => {

        await userLogic.setUser(accountAssetOwner, 'assetOwner', { privateKey: privateKeyDeployment });

        await userLogic.setUser(accountTrader, 'trader', { privateKey: privateKeyDeployment });

        await userLogic.setRoles(accountTrader, 24, { privateKey: privateKeyDeployment });
        await userLogic.setRoles(accountAssetOwner, 24, { privateKey: privateKeyDeployment });
    });

    it('should onboard an asset', async () => {

        await assetRegistry.createSonnenAsset(
            assetSmartmeter,
            accountAssetOwner,
            true,
            (['0x1000000000000000000000000000000000000005'] as any),
            'propertiesDocumentHash',
            'url',
            2,
            marketLookup.web3Contract._address,
            {
                privateKey: privateKeyDeployment,
            },
        );

    });

    it('should set MarketLogicAddress', async () => {

        await assetRegistry.setMarketLookupContract(0, originRegistryContract.web3Contract._address, { privateKey: assetOwnerPK });

        assert.equal(await assetRegistry.getMarketLookupContract(0), originRegistryContract.web3Contract._address);

    });

    it('should create a demand', async () => {

        await marketLogic.createDemand('Saxonia', Date.now(), Date.now() + 1000, 1000, { privateKey: traderPK });

        console.log(await marketLogic.getDemand(0));
    });

    it('should create a supply', async () => {
        await marketLogic.createSupply([0], 'Saxonia', Date.now(), Date.now() + 1000, 1000, 100, 10, { privateKey: traderPK });

    });

    it('should create an agreement', async () => {

        await marketLogic.createAgreement(0, [0], { privateKey: traderPK });
    });

    let dateTimeFrom = Date.now() - 1000;
    let dateTimeTo = Date.now();

    it('should log energy', async () => {

        const tx = await assetRegistry.saveSonnenSmartMeterRead(
            0,
            500,
            'lastSmartMeterReadFileHash',
            dateTimeFrom,
            dateTimeTo,
            10,
            10,
            'url',
            { privateKey: assetSmartmeterPK });

        const event = (await assetRegistry.getAllLogNewMeterReadEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber }))[0];

        assert.equal(event.event, 'LogNewMeterRead');

        assert.deepEqual(event.returnValues, {
            0: '0',
            1: '0',
            2: '500',
            _assetId: '0',
            _oldMeterRead: '0',
            _newMeterRead: '500',
        });

        console.log(tx);
        console.log(await assetRegistry.getSonnenAssetById(0));

        const cert = await (new Certificate.Certificate.Entity('0', conf).sync());

        console.log(cert);

        delete cert.configuration;
        delete cert.proofs;

        assert.deepEqual(cert as any, {
            id: '0',
            initialized: true,
            assetId: '0',
            owner: '0xaf9DdE98b6aeB2225bf87C2cB91c58833fbab2Ab',
            powerInW: '500',
            acceptedToken: '0x0000000000000000000000000000000000000000',
            onCHainDirectPurchasePrice: '0',
            escrow: [],
            approvedAddress: '0x0000000000000000000000000000000000000000',
            activationId: '0',
            dateTimeFrom: '' + dateTimeFrom,
            dateTimeTo: '' + dateTimeTo,
            energyAmount: '500',
            averagePower: '10',
            baselinePower: '10',
            powerProfileURL: 'url',
            powerProfileHash: 'lastSmartMeterReadFileHash',
            reportConfirmed: false,
        });

    });

    it('should create a demand', async () => {

        await marketLogic.createDemand('Saxonia', Date.now(), Date.now() + 1000, 1000, { privateKey: traderPK });

    });

    it('should create a supply', async () => {
        await marketLogic.createSupply([0], 'Saxonia', Date.now(), Date.now() + 1000, 1000, 100, 10, { privateKey: traderPK });

    });

    it('should create an agreement', async () => {

        await marketLogic.createAgreement(1, [1], { privateKey: traderPK });
    });

    dateTimeFrom = Date.now() - 1000;
    dateTimeTo = Date.now();

    it('should log energy', async () => {

        const tx = await assetRegistry.saveSonnenSmartMeterRead(
            0,
            1000,
            'lastSmartMeterReadFileHash',
            dateTimeFrom,
            dateTimeTo,
            10,
            10,
            'url',
            { privateKey: assetSmartmeterPK });

        const event = (await assetRegistry.getAllLogNewMeterReadEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber }))[0];

        assert.equal(event.event, 'LogNewMeterRead');

        assert.deepEqual(event.returnValues, {
            0: '0',
            1: '500',
            2: '1000',
            _assetId: '0',
            _oldMeterRead: '500',
            _newMeterRead: '1000',
        });

        const cert = await (new Certificate.Certificate.Entity('1', conf).sync());

        delete cert.configuration;
        delete cert.proofs;

        assert.deepEqual(cert as any, {
            id: '1',
            initialized: true,
            assetId: '0',
            owner: '0xaf9DdE98b6aeB2225bf87C2cB91c58833fbab2Ab',
            powerInW: '500',
            acceptedToken: '0x0000000000000000000000000000000000000000',
            onCHainDirectPurchasePrice: '0',
            escrow: [],
            approvedAddress: '0x0000000000000000000000000000000000000000',
            activationId: '1',
            dateTimeFrom: '' + dateTimeFrom,
            dateTimeTo: '' + dateTimeTo,
            energyAmount: '500',
            averagePower: '10',
            baselinePower: '10',
            powerProfileURL: 'url',
            powerProfileHash: 'lastSmartMeterReadFileHash',
            reportConfirmed: false,
        });

        console.log(cert);

        /* console.log('\nDemand:');
       console.log(await marketLogic.getDemand(0));
       console.log('\nSupply:');
       console.log(await marketLogic.getSupply(0));
       console.log('\nagreement:');
       console.log(await marketLogic.getAgreement(0));
       */
    });
});
