"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GeneralFunctions_1 = require("./GeneralFunctions");
const AgreementLogic_json_1 = __importDefault(require("../../contract-build/AgreementLogic.json"));
class AgreementLogic extends GeneralFunctions_1.GeneralFunctions {
    constructor(web3, address) {
        super(address ? new web3.eth.Contract(AgreementLogic_json_1.default.abi, address) : new web3.eth.Contract(AgreementLogic_json_1.default.abi, AgreementLogic_json_1.default.networks.length > 0 ? (AgreementLogic_json_1.default.networks[0]) : null));
        this.buildFile = AgreementLogic_json_1.default;
        this.web3 = web3;
    }
    getAllLogAgreementFullySignedEvents(eventFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            let filterParams;
            if (eventFilter) {
                filterParams = {
                    fromBlock: eventFilter.fromBlock ? eventFilter.fromBlock : 0,
                    toBlock: eventFilter.toBlock ? eventFilter.toBlock : 'latest'
                };
                if (eventFilter.topics) {
                    filterParams.topics = eventFilter.topics;
                }
            }
            else {
                filterParams = {
                    fromBlock: 0,
                    toBlock: 'latest'
                };
            }
            return yield this.web3Contract.getPastEvents('LogAgreementFullySigned', filterParams);
        });
    }
    getAllLogAgreementCreatedEvents(eventFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            let filterParams;
            if (eventFilter) {
                filterParams = {
                    fromBlock: eventFilter.fromBlock ? eventFilter.fromBlock : 0,
                    toBlock: eventFilter.toBlock ? eventFilter.toBlock : 'latest'
                };
                if (eventFilter.topics) {
                    filterParams.topics = eventFilter.topics;
                }
            }
            else {
                filterParams = {
                    fromBlock: 0,
                    toBlock: 'latest'
                };
            }
            return yield this.web3Contract.getPastEvents('LogAgreementCreated', filterParams);
        });
    }
    getAllLogChangeOwnerEvents(eventFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            let filterParams;
            if (eventFilter) {
                filterParams = {
                    fromBlock: eventFilter.fromBlock ? eventFilter.fromBlock : 0,
                    toBlock: eventFilter.toBlock ? eventFilter.toBlock : 'latest'
                };
                if (eventFilter.topics) {
                    filterParams.topics = eventFilter.topics;
                }
            }
            else {
                filterParams = {
                    fromBlock: 0,
                    toBlock: 'latest'
                };
            }
            return yield this.web3Contract.getPastEvents('LogChangeOwner', filterParams);
        });
    }
    getAllEvents(eventFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            let filterParams;
            if (eventFilter) {
                filterParams = {
                    fromBlock: eventFilter.fromBlock ? eventFilter.fromBlock : 0,
                    toBlock: eventFilter.toBlock ? eventFilter.toBlock : 'latest',
                    topics: eventFilter.topics ? eventFilter.topics : [null]
                };
            }
            else {
                filterParams = {
                    fromBlock: 0,
                    toBlock: 'latest',
                    topics: [null]
                };
            }
            return yield this.web3Contract.getPastEvents('allEvents', filterParams);
        });
    }
    createAgreement(_propertiesDocumentHash, _documentDBURL, _matcherPropertiesDocumentHash, _matcherDBURL, _demandId, _supplyId, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let transactionParams;
            const txData = yield this.web3Contract.methods.createAgreement(_propertiesDocumentHash, _documentDBURL, _matcherPropertiesDocumentHash, _matcherDBURL, _demandId, _supplyId)
                .encodeABI();
            let gas;
            if (txParams) {
                if (txParams.privateKey) {
                    const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                    txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                    txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                }
                if (!txParams.gas) {
                    try {
                        gas = yield this.web3Contract.methods.createAgreement(_propertiesDocumentHash, _documentDBURL, _matcherPropertiesDocumentHash, _matcherDBURL, _demandId, _supplyId)
                            .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                    }
                    catch (ex) {
                        if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                            throw new Error(ex);
                        const errorResult = yield this.getErrorMessage(this.web3, {
                            from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                            to: this.web3Contract._address,
                            data: txData,
                            gas: this.web3.utils.toHex(7000000)
                        });
                        throw new Error(errorResult);
                    }
                    gas = Math.round(gas * 2);
                    txParams.gas = gas;
                }
                transactionParams = {
                    from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                    gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                    data: txParams.data ? txParams.data : '',
                    to: this.web3Contract._address,
                    privateKey: txParams.privateKey ? txParams.privateKey : ""
                };
            }
            else {
                transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                    gas: Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                    data: '',
                    to: this.web3Contract._address,
                    privateKey: ""
                };
            }
            if (transactionParams.privateKey !== '') {
                transactionParams.data = txData;
                return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
            }
            else {
                return yield this.web3Contract.methods.createAgreement(_propertiesDocumentHash, _documentDBURL, _matcherPropertiesDocumentHash, _matcherDBURL, _demandId, _supplyId)
                    .send({ from: transactionParams.from, gas: transactionParams.gas });
            }
        });
    }
    approveAgreementSupply(_agreementId, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let transactionParams;
            const txData = yield this.web3Contract.methods.approveAgreementSupply(_agreementId)
                .encodeABI();
            let gas;
            if (txParams) {
                if (txParams.privateKey) {
                    const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                    txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                    txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                }
                if (!txParams.gas) {
                    try {
                        gas = yield this.web3Contract.methods.approveAgreementSupply(_agreementId)
                            .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                    }
                    catch (ex) {
                        if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                            throw new Error(ex);
                        const errorResult = yield this.getErrorMessage(this.web3, {
                            from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                            to: this.web3Contract._address,
                            data: txData,
                            gas: this.web3.utils.toHex(7000000)
                        });
                        throw new Error(errorResult);
                    }
                    gas = Math.round(gas * 2);
                    txParams.gas = gas;
                }
                transactionParams = {
                    from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                    gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                    data: txParams.data ? txParams.data : '',
                    to: this.web3Contract._address,
                    privateKey: txParams.privateKey ? txParams.privateKey : ""
                };
            }
            else {
                transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                    gas: Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                    data: '',
                    to: this.web3Contract._address,
                    privateKey: ""
                };
            }
            if (transactionParams.privateKey !== '') {
                transactionParams.data = txData;
                return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
            }
            else {
                return yield this.web3Contract.methods.approveAgreementSupply(_agreementId)
                    .send({ from: transactionParams.from, gas: transactionParams.gas });
            }
        });
    }
    update(_newLogic, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let transactionParams;
            const txData = yield this.web3Contract.methods.update(_newLogic)
                .encodeABI();
            let gas;
            if (txParams) {
                if (txParams.privateKey) {
                    const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                    txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                    txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                }
                if (!txParams.gas) {
                    try {
                        gas = yield this.web3Contract.methods.update(_newLogic)
                            .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                    }
                    catch (ex) {
                        if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                            throw new Error(ex);
                        const errorResult = yield this.getErrorMessage(this.web3, {
                            from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                            to: this.web3Contract._address,
                            data: txData,
                            gas: this.web3.utils.toHex(7000000)
                        });
                        throw new Error(errorResult);
                    }
                    gas = Math.round(gas * 2);
                    txParams.gas = gas;
                }
                transactionParams = {
                    from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                    gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                    data: txParams.data ? txParams.data : '',
                    to: this.web3Contract._address,
                    privateKey: txParams.privateKey ? txParams.privateKey : ""
                };
            }
            else {
                transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                    gas: Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                    data: '',
                    to: this.web3Contract._address,
                    privateKey: ""
                };
            }
            if (transactionParams.privateKey !== '') {
                transactionParams.data = txData;
                return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
            }
            else {
                return yield this.web3Contract.methods.update(_newLogic)
                    .send({ from: transactionParams.from, gas: transactionParams.gas });
            }
        });
    }
    approveAgreementDemand(_agreementId, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let transactionParams;
            const txData = yield this.web3Contract.methods.approveAgreementDemand(_agreementId)
                .encodeABI();
            let gas;
            if (txParams) {
                if (txParams.privateKey) {
                    const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                    txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                    txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                }
                if (!txParams.gas) {
                    try {
                        gas = yield this.web3Contract.methods.approveAgreementDemand(_agreementId)
                            .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                    }
                    catch (ex) {
                        if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                            throw new Error(ex);
                        const errorResult = yield this.getErrorMessage(this.web3, {
                            from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                            to: this.web3Contract._address,
                            data: txData,
                            gas: this.web3.utils.toHex(7000000)
                        });
                        throw new Error(errorResult);
                    }
                    gas = Math.round(gas * 2);
                    txParams.gas = gas;
                }
                transactionParams = {
                    from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                    gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                    data: txParams.data ? txParams.data : '',
                    to: this.web3Contract._address,
                    privateKey: txParams.privateKey ? txParams.privateKey : ""
                };
            }
            else {
                transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                    gas: Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                    data: '',
                    to: this.web3Contract._address,
                    privateKey: ""
                };
            }
            if (transactionParams.privateKey !== '') {
                transactionParams.data = txData;
                return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
            }
            else {
                return yield this.web3Contract.methods.approveAgreementDemand(_agreementId)
                    .send({ from: transactionParams.from, gas: transactionParams.gas });
            }
        });
    }
    getAllAgreementListLength(txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.web3Contract.methods.getAllAgreementListLength().call(txParams));
        });
    }
    userContractLookup(txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.web3Contract.methods.userContractLookup().call(txParams));
        });
    }
    db(txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.web3Contract.methods.db().call(txParams));
        });
    }
    getAgreement(_agreementId, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.web3Contract.methods.getAgreement(_agreementId).call(txParams));
        });
    }
    setMatcherProperties(_agreementId, _matcherPropertiesDocumentHash, _matcherDBURL, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let transactionParams;
            const txData = yield this.web3Contract.methods.setMatcherProperties(_agreementId, _matcherPropertiesDocumentHash, _matcherDBURL)
                .encodeABI();
            let gas;
            if (txParams) {
                if (txParams.privateKey) {
                    const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                    txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                    txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                }
                if (!txParams.gas) {
                    try {
                        gas = yield this.web3Contract.methods.setMatcherProperties(_agreementId, _matcherPropertiesDocumentHash, _matcherDBURL)
                            .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                    }
                    catch (ex) {
                        if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                            throw new Error(ex);
                        const errorResult = yield this.getErrorMessage(this.web3, {
                            from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                            to: this.web3Contract._address,
                            data: txData,
                            gas: this.web3.utils.toHex(7000000)
                        });
                        throw new Error(errorResult);
                    }
                    gas = Math.round(gas * 2);
                    txParams.gas = gas;
                }
                transactionParams = {
                    from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                    gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                    data: txParams.data ? txParams.data : '',
                    to: this.web3Contract._address,
                    privateKey: txParams.privateKey ? txParams.privateKey : ""
                };
            }
            else {
                transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                    gas: Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                    data: '',
                    to: this.web3Contract._address,
                    privateKey: ""
                };
            }
            if (transactionParams.privateKey !== '') {
                transactionParams.data = txData;
                return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
            }
            else {
                return yield this.web3Contract.methods.setMatcherProperties(_agreementId, _matcherPropertiesDocumentHash, _matcherDBURL)
                    .send({ from: transactionParams.from, gas: transactionParams.gas });
            }
        });
    }
    assetContractLookup(txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.web3Contract.methods.assetContractLookup().call(txParams));
        });
    }
    owner(txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.web3Contract.methods.owner().call(txParams));
        });
    }
    changeOwner(_newOwner, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let transactionParams;
            const txData = yield this.web3Contract.methods.changeOwner(_newOwner)
                .encodeABI();
            let gas;
            if (txParams) {
                if (txParams.privateKey) {
                    const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                    txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                    txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                }
                if (!txParams.gas) {
                    try {
                        gas = yield this.web3Contract.methods.changeOwner(_newOwner)
                            .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                    }
                    catch (ex) {
                        if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                            throw new Error(ex);
                        const errorResult = yield this.getErrorMessage(this.web3, {
                            from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                            to: this.web3Contract._address,
                            data: txData,
                            gas: this.web3.utils.toHex(7000000)
                        });
                        throw new Error(errorResult);
                    }
                    gas = Math.round(gas * 2);
                    txParams.gas = gas;
                }
                transactionParams = {
                    from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                    gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                    data: txParams.data ? txParams.data : '',
                    to: this.web3Contract._address,
                    privateKey: txParams.privateKey ? txParams.privateKey : ""
                };
            }
            else {
                transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                    gas: Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                    data: '',
                    to: this.web3Contract._address,
                    privateKey: ""
                };
            }
            if (transactionParams.privateKey !== '') {
                transactionParams.data = txData;
                return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
            }
            else {
                return yield this.web3Contract.methods.changeOwner(_newOwner)
                    .send({ from: transactionParams.from, gas: transactionParams.gas });
            }
        });
    }
    isRole(_role, _caller, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.web3Contract.methods.isRole(_role, _caller).call(txParams));
        });
    }
    getAgreementStruct(_agreementId, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.web3Contract.methods.getAgreementStruct(_agreementId).call(txParams));
        });
    }
    init(_database, _admin, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let transactionParams;
            const txData = yield this.web3Contract.methods.init(_database, _admin)
                .encodeABI();
            let gas;
            if (txParams) {
                if (txParams.privateKey) {
                    const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                    txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                    txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                }
                if (!txParams.gas) {
                    try {
                        gas = yield this.web3Contract.methods.init(_database, _admin)
                            .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                    }
                    catch (ex) {
                        if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                            throw new Error(ex);
                        const errorResult = yield this.getErrorMessage(this.web3, {
                            from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                            to: this.web3Contract._address,
                            data: txData,
                            gas: this.web3.utils.toHex(7000000)
                        });
                        throw new Error(errorResult);
                    }
                    gas = Math.round(gas * 2);
                    txParams.gas = gas;
                }
                transactionParams = {
                    from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                    gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                    data: txParams.data ? txParams.data : '',
                    to: this.web3Contract._address,
                    privateKey: txParams.privateKey ? txParams.privateKey : ""
                };
            }
            else {
                transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                    gas: Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                    data: '',
                    to: this.web3Contract._address,
                    privateKey: ""
                };
            }
            if (transactionParams.privateKey !== '') {
                transactionParams.data = txData;
                return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
            }
            else {
                return yield this.web3Contract.methods.init(_database, _admin)
                    .send({ from: transactionParams.from, gas: transactionParams.gas });
            }
        });
    }
}
exports.AgreementLogic = AgreementLogic;
//# sourceMappingURL=AgreementLogic.js.map