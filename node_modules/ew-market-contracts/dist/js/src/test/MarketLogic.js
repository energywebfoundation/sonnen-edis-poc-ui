"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = __importStar(require("fs"));
require("mocha");
const web3_1 = __importDefault(require("web3"));
const ew_user_registry_contracts_1 = require("ew-user-registry-contracts");
const ew_asset_registry_contracts_1 = require("ew-asset-registry-contracts");
const migrateContracts_1 = require("../utils/migrateContracts");
const MarketContractLookup_1 = require("../wrappedContracts/MarketContractLookup");
const MarketDB_1 = require("../wrappedContracts/MarketDB");
const MarketLogic_1 = require("../wrappedContracts/MarketLogic");
const __1 = require("..");
describe('MarketLogic', () => {
    const configFile = JSON.parse(fs.readFileSync(process.cwd() + '/connection-config.json', 'utf8'));
    const web3 = new web3_1.default(configFile.develop.web3);
    const privateKeyDeployment = configFile.develop.deployKey.startsWith('0x') ?
        configFile.develop.deployKey : '0x' + configFile.develop.deployKey;
    const accountDeployment = web3.eth.accounts.privateKeyToAccount(privateKeyDeployment).address;
    let assetRegistryContract;
    let marketRegistryContract;
    let marketDB;
    let marketLogic;
    let isGanache;
    let userContractLookupAddr;
    let userLogic;
    let assetRegistry;
    const assetOwnerPK = '0xc118b0425221384fe0cbbd093b2a81b1b65d0330810e0792c7059e518cea5383';
    const accountAssetOwner = web3.eth.accounts.privateKeyToAccount(assetOwnerPK).address;
    const traderPK = '0x2dc5120c26df339dbd9861a0f39a79d87e0638d30fdedc938861beac77bbd3f5';
    const accountTrader = web3.eth.accounts.privateKeyToAccount(traderPK).address;
    const matcherPK = '0x191c4b074672d9eda0ce576cfac79e44e320ffef5e3aadd55e000de57341d36c';
    const matcherAccount = web3.eth.accounts.privateKeyToAccount(matcherPK).address;
    it('should deploy the contracts', () => __awaiter(this, void 0, void 0, function* () {
        isGanache = true;
        const userContracts = yield ew_user_registry_contracts_1.migrateUserRegistryContracts(web3, privateKeyDeployment);
        userLogic = new ew_user_registry_contracts_1.UserLogic(web3, userContracts.UserLogic);
        yield userLogic.setUser(accountDeployment, 'admin', { privateKey: privateKeyDeployment });
        yield userLogic.setRoles(accountDeployment, 3, { privateKey: privateKeyDeployment });
        userContractLookupAddr = userContracts.UserContractLookup;
        const assetContracts = yield ew_asset_registry_contracts_1.migrateAssetRegistryContracts(web3, userContractLookupAddr, privateKeyDeployment);
        const assetRegistryLookupAddr = assetContracts.AssetContractLookup;
        const marketContracts = yield migrateContracts_1.migrateMarketRegistryContracts(web3, assetRegistryLookupAddr, privateKeyDeployment);
        assetRegistryContract = new ew_asset_registry_contracts_1.AssetContractLookup(web3, assetRegistryLookupAddr);
        assetRegistry = new ew_asset_registry_contracts_1.AssetProducingRegistryLogic(web3, assetContracts.AssetProducingRegistryLogic);
        Object.keys(marketContracts).forEach((key) => __awaiter(this, void 0, void 0, function* () {
            let tempBytecode;
            if (key.includes('MarketContractLookup')) {
                marketRegistryContract = new MarketContractLookup_1.MarketContractLookup(web3, marketContracts[key]);
                tempBytecode = '0x' + __1.MarketContractLookupJSON.deployedBytecode;
            }
            if (key.includes('MarketLogic')) {
                marketLogic = new MarketLogic_1.MarketLogic(web3, marketContracts[key]);
                tempBytecode = '0x' + __1.MarketLogicJSON.deployedBytecode;
            }
            if (key.includes('MarketDB')) {
                marketDB = new MarketDB_1.MarketDB(web3, marketContracts[key]);
                tempBytecode = '0x' + __1.MarketDBJSON.deployedBytecode;
            }
            const deployedBytecode = yield web3.eth.getCode(marketContracts[key]);
            chai_1.assert.isTrue(deployedBytecode.length > 0);
            // const tempBytecode = '0x' + contractInfo.deployedBytecode;
            chai_1.assert.equal(deployedBytecode, tempBytecode);
        }));
    }));
    it('should have the right owner', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.owner(), marketRegistryContract.web3Contract._address);
    }));
    it('should have the lookup-contracts', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.assetContractLookup(), assetRegistryContract.web3Contract._address);
        chai_1.assert.equal(yield marketLogic.userContractLookup(), userContractLookupAddr);
    }));
    it('should have the right db', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.db(), marketDB.web3Contract._address);
    }));
    it('should fail when trying to call init', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.init('0x1000000000000000000000000000000000000005', '0x1000000000000000000000000000000000000005', { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'msg.sender is not owner');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to call update', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.update('0x1000000000000000000000000000000000000005', { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'msg.sender is not owner');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should have 0 elements in allDemands', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.getAllDemandListLength(), 0);
    }));
    it('should throw an error when trying to access a non existing demand', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.getDemand(0);
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create a demand as userAdmin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createDemand('propertiesDocumentHash', 'documentDBURL', { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
            if (isGanache) {
                chai_1.assert.include(ex.message, 'user does not have the required role');
            }
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create a demand as non registered user', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createDemand('propertiesDocumentHash', 'documentDBURL', { privateKey: traderPK });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'user does not have the required role');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should set right roles to users', () => __awaiter(this, void 0, void 0, function* () {
        yield userLogic.setUser(accountTrader, 'trader', { privateKey: privateKeyDeployment });
        yield userLogic.setUser(accountAssetOwner, 'assetOwner', { privateKey: privateKeyDeployment });
        yield userLogic.setRoles(accountTrader, 16, { privateKey: privateKeyDeployment });
        yield userLogic.setRoles(accountAssetOwner, 8, { privateKey: privateKeyDeployment });
    }));
    it('should fail when trying to create a demand as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createDemand('propertiesDocumentHash', 'documentDBURL', { privateKey: assetOwnerPK });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'user does not have the required role');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should create a demand as trader', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.createDemand('propertiesDocumentHash', 'documentDBURL', { privateKey: traderPK });
        const allEvents = yield marketLogic.getAllcreatedNewDemandEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
        chai_1.assert.equal(allEvents.length, 1);
        const createDemandEvent = allEvents[0];
        chai_1.assert.equal(createDemandEvent.event, 'createdNewDemand');
        chai_1.assert.deepEqual(createDemandEvent.returnValues, {
            0: accountTrader,
            1: '0',
            _sender: accountTrader,
            _demandId: '0',
        });
    }));
    it('should get a demand', () => __awaiter(this, void 0, void 0, function* () {
        const demand = yield marketLogic.getDemand(0);
        demand[2] = demand[2].toLowerCase();
        demand._owner = demand._owner.toLowerCase();
        chai_1.assert.deepEqual(demand, {
            0: 'propertiesDocumentHash',
            1: 'documentDBURL',
            2: accountTrader.toLowerCase(),
            _propertiesDocumentHash: 'propertiesDocumentHash',
            _documentDBURL: 'documentDBURL',
            _owner: accountTrader.toLowerCase(),
        });
    }));
    it('should have 1 demand in demandList', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.getAllDemandListLength(), 1);
    }));
    it('should fail when trying to create a supply with an non-existing asset as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createSupply('propertiesDocumentHash', 'documentDBURL', 1, { privateKey: assetOwnerPK });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create a supply with an non-existing asset as trader', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createSupply('propertiesDocumentHash', 'documentDBURL', 1, { privateKey: traderPK });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create a supply with an non-existing asset as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createSupply('propertiesDocumentHash', 'documentDBURL', 1, { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should onboard an asset', () => __awaiter(this, void 0, void 0, function* () {
        yield assetRegistry.createAsset('0x1000000000000000000000000000000000000005', accountAssetOwner, true, ['0x1000000000000000000000000000000000000006'], 'propertiesDocumentHash', 'url', 10, {
            privateKey: privateKeyDeployment,
        });
    }));
    it('should fail when trying to create a supply with an non-existing asset as trader', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createSupply('propertiesDocumentHash', 'documentDBURL', 0, { privateKey: traderPK });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create a supply with an non-existing asset as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createSupply('propertiesDocumentHash', 'documentDBURL', 0, { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should have 0 elements in supplyList', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.getAllSupplyListLength(), 0);
    }));
    it('should create a supply as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.createSupply('propertiesDocumentHash', 'documentDBURL', 0, { privateKey: assetOwnerPK });
        const allEvents = yield marketLogic.getAllcreatedNewSupplyEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
        chai_1.assert.equal(allEvents.length, 1);
        const createEvent = allEvents[0];
        chai_1.assert.equal(createEvent.event, 'createdNewSupply');
        chai_1.assert.deepEqual(createEvent.returnValues, {
            0: accountAssetOwner,
            1: '0',
            _sender: accountAssetOwner,
            _supplyId: '0',
        });
    }));
    it('should have 1 elements in supplyList', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.getAllSupplyListLength(), 1);
    }));
    it('should fail when trying to create an aggreement with a non-existing supply as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 0, 1, { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create an aggreement with a non-existing supply as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 0, 1, { privateKey: assetOwnerPK });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create an aggreement with a non-existing supply as trader', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 0, 1, { privateKey: traderPK });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create an aggreement with a non-existing demand as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 1, 0, { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create an aggreement with a non-existing demand as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 1, 0, { privateKey: assetOwnerPK });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create an aggreement with a non-existing demand as trader', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 1, 0, { privateKey: traderPK });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create an aggreement with a non-existing demand and non-existing supply as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 1, 1, { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create an aggreement with a non-existing demand and non-existing supply as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 1, 1, { privateKey: assetOwnerPK });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create an aggreement with a non-existing demand and non-existing supply as trader', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 1, 1, { privateKey: traderPK });
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to create an aggreement as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 0, 0, { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'createDemand: wrong owner when creating');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should throw an error when accessing a non existing-agreement', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            const agreement = yield marketLogic.getAgreement(0);
        }
        catch (ex) {
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should have 0 agreements in list', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.getAllAgreementListLength(), 0);
    }));
    it('should create an aggreement as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.createAgreement('propertiesDocumentHash', 'documentDBURL', 'matcherPropertiesDocumentHash', 'matcherDocumentDBURL', 0, 0, { privateKey: assetOwnerPK });
        if (isGanache) {
            const allEvents = yield marketLogic.getAllLogAgreementCreatedEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
            chai_1.assert.equal(allEvents.length, 1);
            const agreementEvent = allEvents[0];
            chai_1.assert.equal(agreementEvent.event, 'LogAgreementCreated');
            chai_1.assert.deepEqual(agreementEvent.returnValues, {
                0: '0',
                1: '0',
                2: '0',
                _agreementId: '0',
                _demandId: '0',
                _supplyId: '0',
            });
        }
    }));
    it('should be able to approve aggreement again as supplyOwner', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.approveAgreementSupply(0, { privateKey: assetOwnerPK });
    }));
    it('should have 1 agreements in list', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.getAllAgreementListLength(), 1);
    }));
    it('should fail when trying to call approveAgreementDemand as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            const tx = yield marketLogic.approveAgreementDemand(0, { privateKey: assetOwnerPK });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'approveAgreementDemand: wrong msg.sender');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to call approveAgreementDemand as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            const tx = yield marketLogic.approveAgreementDemand(0, { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'approveAgreementDemand: wrong msg.sender');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should return the (not yet full) agreement', () => __awaiter(this, void 0, void 0, function* () {
        const agreement = yield marketLogic.getAgreement(0);
        chai_1.assert.deepEqual(agreement, {
            0: 'propertiesDocumentHash',
            1: 'documentDBURL',
            2: 'matcherPropertiesDocumentHash',
            3: 'matcherDocumentDBURL',
            4: '0',
            5: '0',
            6: true,
            7: false,
            8: ['0x1000000000000000000000000000000000000006'],
            _propertiesDocumentHash: 'propertiesDocumentHash',
            _documentDBURL: 'documentDBURL',
            _matcherPropertiesDocumentHash: 'matcherPropertiesDocumentHash',
            _matcherDBURL: 'matcherDocumentDBURL',
            _demandId: '0',
            _supplyId: '0',
            _approvedBySupplyOwner: true,
            _approvedByDemandOwner: false,
            _allowedMatcher: ['0x1000000000000000000000000000000000000006'],
        });
    }));
    it('should be able to approve agreementDemand as trader', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.approveAgreementDemand(0, { privateKey: traderPK });
        if (isGanache) {
            const allEvents = yield marketLogic.getAllLogAgreementFullySignedEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
            chai_1.assert.equal(allEvents.length, 1);
            const signedEvent = allEvents[0];
            chai_1.assert.equal(signedEvent.event, 'LogAgreementFullySigned');
            chai_1.assert.deepEqual(signedEvent.returnValues, {
                0: '0',
                1: '0',
                2: '0',
                _agreementId: '0',
                _demandId: '0',
                _supplyId: '0',
            });
        }
    }));
    it('should return the full agreement', () => __awaiter(this, void 0, void 0, function* () {
        const agreement = yield marketLogic.getAgreement(0);
        chai_1.assert.deepEqual(agreement, {
            0: 'propertiesDocumentHash',
            1: 'documentDBURL',
            2: 'matcherPropertiesDocumentHash',
            3: 'matcherDocumentDBURL',
            4: '0',
            5: '0',
            6: true,
            7: true,
            8: ['0x1000000000000000000000000000000000000006'],
            _propertiesDocumentHash: 'propertiesDocumentHash',
            _documentDBURL: 'documentDBURL',
            _matcherPropertiesDocumentHash: 'matcherPropertiesDocumentHash',
            _matcherDBURL: 'matcherDocumentDBURL',
            _demandId: '0',
            _supplyId: '0',
            _approvedBySupplyOwner: true,
            _approvedByDemandOwner: true,
            _allowedMatcher: ['0x1000000000000000000000000000000000000006'],
        });
    }));
    it('should fail when trying to change matcherproperties with wrong account (assetAdmin)', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            const agreement = yield marketLogic.setMatcherProperties(0, 'newProps', 'newURl', { privateKey: privateKeyDeployment });
        }
        catch (e) {
            failed = true;
            chai_1.assert.include(e.message, 'sender is not in matcher array');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to change matcherproperties with wrong account (assetOwner)', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            const agreement = yield marketLogic.setMatcherProperties(0, 'newProps', 'newURl', { privateKey: assetOwnerPK });
        }
        catch (e) {
            failed = true;
            chai_1.assert.include(e.message, 'sender is not in matcher array');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should change matcherproperties ', () => __awaiter(this, void 0, void 0, function* () {
        yield assetRegistry.addMatcher(0, matcherAccount, { privateKey: assetOwnerPK });
        //      const agreement = await marketLogic.setMatcherProperties(0, 'newProps', 'newURl', { privateKey:  });
        let failed = false;
        try {
            yield marketLogic.setMatcherProperties(0, 'newMatcherProps', 'newMatcherDB', { privateKey: matcherPK });
        }
        catch (e) {
            failed = true;
            chai_1.assert.include(e.message, 'sender is not in matcher array');
        }
        yield assetRegistry.removeMatcher(0, matcherAccount, { privateKey: assetOwnerPK });
        chai_1.assert.isTrue(failed);
    }));
    it('should create a 2nd supply as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.createSupply('propertiesDocumentHash_2', 'documentDBURL_2', 0, { privateKey: assetOwnerPK });
        const allEvents = yield marketLogic.getAllcreatedNewSupplyEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
        chai_1.assert.equal(allEvents.length, 1);
        const createEvent = allEvents[0];
        chai_1.assert.equal(createEvent.event, 'createdNewSupply');
        chai_1.assert.deepEqual(createEvent.returnValues, {
            0: accountAssetOwner,
            1: '1',
            _sender: accountAssetOwner,
            _supplyId: '1',
        });
    }));
    it('should create a 2nd demand as trader', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.createDemand('propertiesDocumentHash_2', 'documentDBURL_2', { privateKey: traderPK });
        if (isGanache) {
            const allEvents = yield marketLogic.getAllcreatedNewDemandEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
            chai_1.assert.equal(allEvents.length, 1);
            const createDemandEvent = allEvents[0];
            chai_1.assert.equal(createDemandEvent.event, 'createdNewDemand');
            chai_1.assert.deepEqual(createDemandEvent.returnValues, {
                0: accountTrader,
                1: '1',
                _sender: accountTrader,
                _demandId: '1',
            });
        }
    }));
    it('should create an aggreement as trader', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.createAgreement('propertiesDocumentHash_2', 'documentDBURL_2', 'matcherPropertiesDocumentHash_2', 'matcherDocumentDBURL_2', 1, 1, { privateKey: traderPK });
        if (isGanache) {
            const allEvents = yield marketLogic.getAllLogAgreementCreatedEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
            chai_1.assert.equal(allEvents.length, 1);
            const agreementEvent = allEvents[0];
            chai_1.assert.equal(agreementEvent.event, 'LogAgreementCreated');
            chai_1.assert.deepEqual(agreementEvent.returnValues, {
                0: '1',
                1: '1',
                2: '1',
                _agreementId: '1',
                _demandId: '1',
                _supplyId: '1',
            });
        }
    }));
    it('should return the (not yet full) 2nd agreement', () => __awaiter(this, void 0, void 0, function* () {
        const agreement = yield marketLogic.getAgreement(1);
        chai_1.assert.deepEqual(agreement, {
            0: 'propertiesDocumentHash_2',
            1: 'documentDBURL_2',
            2: 'matcherPropertiesDocumentHash_2',
            3: 'matcherDocumentDBURL_2',
            4: '1',
            5: '1',
            6: false,
            7: true,
            8: ['0x1000000000000000000000000000000000000006'],
            _propertiesDocumentHash: 'propertiesDocumentHash_2',
            _documentDBURL: 'documentDBURL_2',
            _matcherPropertiesDocumentHash: 'matcherPropertiesDocumentHash_2',
            _matcherDBURL: 'matcherDocumentDBURL_2',
            _demandId: '1',
            _supplyId: '1',
            _approvedBySupplyOwner: false,
            _approvedByDemandOwner: true,
            _allowedMatcher: ['0x1000000000000000000000000000000000000006'],
        });
    }));
    it('should be able to approve 2nd aggreement again as supplyOwner', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.approveAgreementDemand(1, { privateKey: traderPK });
    }));
    it('should fail when trying to call approveAgreementSupply as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            const tx = yield marketLogic.approveAgreementSupply(1, { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'approveAgreementSupply: wrong msg.sender');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail when trying to call approveAgreementSupply as trader', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            const tx = yield marketLogic.approveAgreementSupply(1, { privateKey: traderPK });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'approveAgreementSupply: wrong msg.sender');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should be able to call approveAgreementSupply as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.approveAgreementSupply(1, { privateKey: assetOwnerPK });
        if (isGanache) {
            const allEvents = yield marketLogic.getAllLogAgreementFullySignedEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
            chai_1.assert.equal(allEvents.length, 1);
            const signedEvent = allEvents[0];
            chai_1.assert.equal(signedEvent.event, 'LogAgreementFullySigned');
            chai_1.assert.deepEqual(signedEvent.returnValues, {
                0: '1',
                1: '1',
                2: '1',
                _agreementId: '1',
                _demandId: '1',
                _supplyId: '1',
            });
        }
    }));
    it('should return the  2nd agreement', () => __awaiter(this, void 0, void 0, function* () {
        const agreement = yield marketLogic.getAgreement(1);
        chai_1.assert.deepEqual(agreement, {
            0: 'propertiesDocumentHash_2',
            1: 'documentDBURL_2',
            2: 'matcherPropertiesDocumentHash_2',
            3: 'matcherDocumentDBURL_2',
            4: '1',
            5: '1',
            6: true,
            7: true,
            8: ['0x1000000000000000000000000000000000000006'],
            _propertiesDocumentHash: 'propertiesDocumentHash_2',
            _documentDBURL: 'documentDBURL_2',
            _matcherPropertiesDocumentHash: 'matcherPropertiesDocumentHash_2',
            _matcherDBURL: 'matcherDocumentDBURL_2',
            _demandId: '1',
            _supplyId: '1',
            _approvedBySupplyOwner: true,
            _approvedByDemandOwner: true,
            _allowedMatcher: ['0x1000000000000000000000000000000000000006'],
        });
    }));
    it('should have 2 agreements in list', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketLogic.getAllAgreementListLength(), 2);
    }));
    it('should add 2nd matcher to asset', () => __awaiter(this, void 0, void 0, function* () {
        yield assetRegistry.addMatcher(0, matcherAccount, { privateKey: assetOwnerPK });
    }));
    it('should create a 3rd aggreement as trader', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.createAgreement('propertiesDocumentHash_3', 'documentDBURL_3', 'matcherPropertiesDocumentHash_3', 'matcherDocumentDBURL_3', 1, 1, { privateKey: traderPK });
        const allEvents = yield marketLogic.getAllLogAgreementCreatedEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
        chai_1.assert.equal(allEvents.length, 1);
        const agreementEvent = allEvents[0];
        chai_1.assert.equal(agreementEvent.event, 'LogAgreementCreated');
        chai_1.assert.deepEqual(agreementEvent.returnValues, {
            0: '2',
            1: '1',
            2: '1',
            _agreementId: '2',
            _demandId: '1',
            _supplyId: '1',
        });
    }));
    it('should fail when trying to set Matcherproperties when the agreement is not finihsed yet', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.setMatcherProperties(2, 'newProps', 'newDB', { privateKey: matcherPK });
        }
        catch (e) {
            failed = true;
            chai_1.assert.include(e.message, 'supply owner has not agreed yet');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should create 3rd agreement', () => __awaiter(this, void 0, void 0, function* () {
        yield marketLogic.approveAgreementSupply(2, { privateKey: assetOwnerPK });
    }));
    it('should change matcherpropertes', () => __awaiter(this, void 0, void 0, function* () {
        yield marketLogic.setMatcherProperties(2, 'newMatcherProps', 'newMatcherDB', { privateKey: matcherPK });
        chai_1.assert.deepEqual(yield marketLogic.getAgreement(2), {
            0: 'propertiesDocumentHash_3',
            1: 'documentDBURL_3',
            2: 'newMatcherProps',
            3: 'newMatcherDB',
            4: '1',
            5: '1',
            6: true,
            7: true,
            8: ['0x1000000000000000000000000000000000000006',
                matcherAccount],
            _propertiesDocumentHash: 'propertiesDocumentHash_3',
            _documentDBURL: 'documentDBURL_3',
            _matcherPropertiesDocumentHash: 'newMatcherProps',
            _matcherDBURL: 'newMatcherDB',
            _demandId: '1',
            _supplyId: '1',
            _approvedBySupplyOwner: true,
            _approvedByDemandOwner: true,
            _allowedMatcher: ['0x1000000000000000000000000000000000000006',
                matcherAccount],
        });
    }));
    it('should create a 4th aggreement as assetOwner', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield marketLogic.createAgreement('propertiesDocumentHash_4', 'documentDBURL_4', 'matcherPropertiesDocumentHash_4', 'matcherDocumentDBURL_4', 1, 1, { privateKey: assetOwnerPK });
        const allEvents = yield marketLogic.getAllLogAgreementCreatedEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber });
        chai_1.assert.equal(allEvents.length, 1);
        const agreementEvent = allEvents[0];
        chai_1.assert.equal(agreementEvent.event, 'LogAgreementCreated');
        chai_1.assert.deepEqual(agreementEvent.returnValues, {
            0: '3',
            1: '1',
            2: '1',
            _agreementId: '3',
            _demandId: '1',
            _supplyId: '1',
        });
    }));
    it('should fail when trying to set Matcherproperties when the agreement is not finihsed yet', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketLogic.setMatcherProperties(3, 'newProps', 'newDB', { privateKey: matcherPK });
        }
        catch (e) {
            failed = true;
            chai_1.assert.include(e.message, 'demand owner has not agreed yet');
        }
        chai_1.assert.isTrue(failed);
    }));
});
//# sourceMappingURL=MarketLogic.js.map